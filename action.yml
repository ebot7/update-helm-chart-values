name: e-bot7 helm chart value updater
description: Create a PR to update a helm chart's value.
inputs:
  repository:
    required: true
    description: The repository with the helm chart values file.
  file_path:
    required: true
    description: The path to the file relative to the repository root. This can contain bash globbing patterns to update multiple files.
  key:
    required: true
    description: The key to be updated in the file.
    example: '.myApp.image.tag'
  value:
    required: true
    description: The value to set for the given key.
  token:
    required: true
    description: The token used to checkout the repo and create the PR.
  auto_merge:
    type: boolean
    default: true
    description: Whether to enable automatic merging for the PR.

runs:
    using: composite
    steps:
      - name: Clone remote repository
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          token: ${{ inputs.token }}

      - name: Update the value in the yaml file
        shell: bash
        run: |
          # Process each file individually, yq doesn't support editing multiple files.
          ls ${{ inputs.file_path }} | \
            xargs -n1 yq e -i '${{ inputs.key }} = "${{ inputs.value }}"' 
          BRANCH=$(echo "autoupdate-${{ inputs.file_path }}" | sed -r 's/[^-_.a-zA-Z0-9]+/_/g')

          git checkout -b $BRANCH

          git config user.name ${{ github.actor }}
          git config user.email "${{ github.actor }}@users.noreply.github.com>"
          git commit \
          --allow-empty \
          -m "Updating ${{ inputs.key }} to ${{ inputs.value }} in ${{ inputs.file_path }}" \
          ${{ inputs.file_path }}

          git push --force --set-upstream origin $BRANCH

      - name: Create automated Pull Request
        shell: bash
        env:
          GITHUB_TOKEN: ${{ inputs.token }}
        run: |
          # Create a PR if it doesn't exist yet or if there is one that isn't open.
          if [[ "$(gh pr view --json state)" != *"OPEN"* ]]
          then
            gh pr create --fill
          fi

      - name: Merge Pull Request
        if: ${{ inputs.auto_merge == 'true' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ inputs.token }}
        run: |
          if gh pr checks
          then
            # All checks are passing, merge.
            gh pr merge --rebase --delete-branch
          else
            gh pr merge --auto --rebase --delete-branch
          fi
